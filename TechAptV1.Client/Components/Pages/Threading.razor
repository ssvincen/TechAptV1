@page "/threading"
@using TechAptV1.Client.Services

<h3>Threading &amp; Data Persistence</h3>

<div>
    <button class="btn btn-primary" @onclick="Start" disabled="@_isProcessing">
        @if (_isProcessing)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span> Processing Data...</span>
        }
        else
        {
            <span>Start</span>
        }
    </button>
    <button class="btn btn-primary" @onclick="Save" disabled="@(!_canSave || _isSaving)">
        @if (_isSaving)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span> Saving Data...</span>
        }
        else
        {
            <span>Save</span>
        }
    </button>
</div>

<div>
    <hr>
    <h4>Numbers:</h4>
    <ul>
        <li>Odd: <strong>@this._oddNumbers</strong></li>
        <li>Even: <strong>@this._evenNumbers</strong></li>
        <li>Prime: <strong>@this._primeNumbers</strong></li>
        <li>Total: <strong>@this._totalNumbers</strong></li>
    </ul>
    <hr>
</div>

@code {

    [Inject] public required ILogger<Threading> Logger { get; set; }
    @inject ThreadingService ThreadingService

    private int _oddNumbers = 0;
    private int _evenNumbers = 0;
    private int _primeNumbers = 0;
    private int _totalNumbers = 0;

    private bool _isProcessing = false;
    private bool _isSaving = false;
    private bool _canSave = false;
    private Timer? _timer;


    private void UpdateUI(object? state)
    {
        InvokeAsync(() =>
        {
            _totalNumbers = ThreadingService.GetTotalNumbers();
            _oddNumbers = ThreadingService.GetOddNumbers();
            _evenNumbers = ThreadingService.GetEvenNumbers();
            _primeNumbers = ThreadingService.GetPrimeNumbers();
            StateHasChanged();
        });
    }   



    protected override void OnInitialized()
    {
        _timer = new Timer(UpdateUI, null, 0, 500);
        // _timer = new Timer(UpdateUI, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async Task Start()
    {
        if (_isProcessing) return;

        _isProcessing = true;
        _canSave = false; // Ensure save is disabled while processing
        StateHasChanged();

        Logger.LogInformation("Starting computation...");

        await ThreadingService.Start();

        Logger.LogInformation("Computation complete.");
        _isProcessing = false;
        _canSave = true; // Allow saving after computation
        StateHasChanged();
    }

    private async Task Save()
    {
        if (!_canSave || _isSaving) return;

        _isSaving = true;
        StateHasChanged();

        Logger.LogInformation("Saving data...");
        await Task.Delay(1); //Adding a delay so that the UI doesn't freeze while saving data and displaying the spinner
        await ThreadingService.Save();

        Logger.LogInformation("Done saving data.");
        _isSaving = false;
        _canSave = false; // Prevent saving again after one save
        StateHasChanged();
    }
}
